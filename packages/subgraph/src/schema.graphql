type User @entity {
  id: ID!
  userAddress: Bytes!
  stakedAmount: BigInt!
  stakedTokens: BigInt!
  status: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
  transactionHash: String!
  challenges: [Challenge!] @derivedFrom(field: "user")
}

type Challenge @entity {
  id: ID!
  challengeId: BigInt!
  user: User!
  ChallengeType: Int!
  userAddress: Bytes!
  objective: String!
  initialTarget: Int!
  numberOfWeeks: Int!
  stakedAmount: BigInt!
  defaultAddress: Bytes!
  success: Int!
  status: Boolean!
  failedWeeks: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  transactionHash: String!
  ERC20Address: Bytes!
  competitionDeadline: BigInt!
  nextIntervalReviewEpoch: BigInt!
  intervalReviewTally: Int!
  weeklyTargetIncreasePercentage: Int!
  latitude: BigDecimal!
  longitude: BigDecimal!
  coordinatesLogged: [RecordedCoordinates!] @derivedFrom(field: "challenge")
  reviews: [IntervalReviews!] @derivedFrom(field: "challenge")
}

type IntervalReviews @entity {
  id: ID!
  challenge: Challenge!
  challengeId: BigInt!
  status: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
  transactionHash: String!
}

type RecordedCoordinates @entity {
  id: ID!
  challenge: Challenge!
  challengeId: BigInt!
  latitude: BigDecimal!
  longitude: BigDecimal!
  CoordinatesLoggedDate: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  transactionHash: String!
}
