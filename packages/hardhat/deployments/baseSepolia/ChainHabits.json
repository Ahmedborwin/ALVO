{
  "address": "0x817253f245A48B0B2f156c0b84460c2819a9D2c1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ChallengeNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ChallengeStillActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ERC20DepositAmountIs0",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ERC20TokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ERC20TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ForfeitAddressInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__ForfeitExceedsStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__IncorrectAddressORChallengeId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__InsufficientERC20Allowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__InsufficientERC20Balance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__PrivateInformation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__StakeAmountisZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__UserAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__UserHasLiveObjective",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CHAINHABITS__UserNotYetRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeForfeited",
          "type": "uint256"
        }
      ],
      "name": "ChallengeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ForfeitedFundsFailedToSend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "IntervalReviewCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "Objective",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "startingMiles",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "NumberofWeeks",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "PercentageIncrease",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "defaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        }
      ],
      "name": "NewChallengeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewUserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ForfeitedFundsToBeCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeId",
          "type": "uint256"
        }
      ],
      "name": "_isChallengeLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "addPriceFeedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "challengeTable",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "targetMiles",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "NoOfWeeks",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "failedWeeks",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isLive",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "challengeStartDate",
          "type": "uint48"
        },
        {
          "internalType": "address",
          "name": "defaultAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_obj",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_targetMiles",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_weeks",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_forfeitAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_percentageIncrease",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_erc20Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "createNewChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "targetMiles",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "NoOfWeeks",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "failedWeeks",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isLive",
              "type": "bool"
            },
            {
              "internalType": "uint48",
              "name": "challengeStartDate",
              "type": "uint48"
            },
            {
              "internalType": "address",
              "name": "defaultAddress",
              "type": "address"
            }
          ],
          "internalType": "struct ChainHabits.ChallengeDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getChallengeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "refreshToken",
              "type": "string"
            }
          ],
          "internalType": "struct ChainHabits.UserDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_challengeId",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_user",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "failed",
          "type": "bool[]"
        }
      ],
      "name": "handleBulkIntervalReview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeForfeited",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20Address",
          "type": "address"
        }
      ],
      "name": "handleCompleteChallengeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeForfeited",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20Address",
          "type": "address"
        }
      ],
      "name": "handleCompleteChallengeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "failed",
          "type": "bool"
        }
      ],
      "name": "handleIntervalReview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUserRegisteredTable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_refreshToken",
          "type": "string"
        }
      ],
      "name": "registerNewUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_refreshToken",
          "type": "string"
        }
      ],
      "name": "updateRefreshToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userHasLiveChallenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20Address",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb0bfa9539f50f4cdd415588a1cda114ae623e8fbfa9bd196e45c4cb5e40ca8e",
  "receipt": {
    "to": null,
    "from": "0x5f2AF68dF96F3e58e1a243F4f83aD4f5D0Ca6029",
    "contractAddress": "0x817253f245A48B0B2f156c0b84460c2819a9D2c1",
    "transactionIndex": 11,
    "gasUsed": "2026097",
    "logsBloom": "0x
    "blockHash": "0x32344f417f88aee5b08e1ff118d7ce68e05702df445693b462081bd7bf9c7a5c",
    "transactionHash": "0xeb0bfa9539f50f4cdd415588a1cda114ae623e8fbfa9bd196e45c4cb5e40ca8e",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 12936740,
        "transactionHash": "0xeb0bfa9539f50f4cdd415588a1cda114ae623e8fbfa9bd196e45c4cb5e40ca8e",
        "address": "0x817253f245A48B0B2f156c0b84460c2819a9D2c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f2af68df96f3e58e1a243f4f83ad4f5d0ca6029"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x32344f417f88aee5b08e1ff118d7ce68e05702df445693b462081bd7bf9c7a5c"
      }
    ],
    "blockNumber": 12936740,
    "cumulativeGasUsed": "3270844",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e76b480d71d16c0dd544c0f889b95ae0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ChallengeNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ChallengeStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ERC20DepositAmountIs0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ERC20TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ForfeitAddressInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__ForfeitExceedsStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__IncorrectAddressORChallengeId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__InsufficientERC20Allowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__InsufficientERC20Balance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__PrivateInformation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__StakeAmountisZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__UserAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__UserHasLiveObjective\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINHABITS__UserNotYetRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeForfeited\",\"type\":\"uint256\"}],\"name\":\"ChallengeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForfeitedFundsFailedToSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"IntervalReviewCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Objective\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"startingMiles\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"NumberofWeeks\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"PercentageIncrease\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"NewChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewUserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ForfeitedFundsToBeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"_isChallengeLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"addPriceFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"challengeTable\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"targetMiles\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"NoOfWeeks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"failedWeeks\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLive\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"challengeStartDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"defaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_obj\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_targetMiles\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_weeks\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_forfeitAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentageIncrease\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"createNewChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"targetMiles\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"NoOfWeeks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"failedWeeks\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLive\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"challengeStartDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"defaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct ChainHabits.ChallengeDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getChallengeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"refreshToken\",\"type\":\"string\"}],\"internalType\":\"struct ChainHabits.UserDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_challengeId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"failed\",\"type\":\"bool[]\"}],\"name\":\"handleBulkIntervalReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeForfeited\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"handleCompleteChallengeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeForfeited\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"handleCompleteChallengeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"failed\",\"type\":\"bool\"}],\"name\":\"handleIntervalReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserRegisteredTable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_refreshToken\",\"type\":\"string\"}],\"name\":\"registerNewUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_refreshToken\",\"type\":\"string\"}],\"name\":\"updateRefreshToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHasLiveChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainHabits.sol\":\"ChainHabits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ChainHabits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//TODO datatructure to record all active players\\n\\n// Errors\\nerror CHAINHABITS__UserAlreadyRegistered();\\nerror CHAINHABITS__UserNotYetRegistered();\\nerror CHAINHABITS__NoActiveChallengeForUser();\\nerror CHAINHABITS__ChallengeStillActive();\\nerror CHAINHABITS__InsufficientFunds();\\nerror CHAINHABITS__UserHasLiveObjective();\\nerror CHAINHABITS__StakeAmountisZero();\\nerror CHAINHABITS__ForfeitAddressInvalid();\\nerror CHAINHABITS__ChallengeNotLive();\\nerror CHAINHABITS__IncorrectAddressORChallengeId();\\nerror CHAINHABITS__InsufficientERC20Balance();\\nerror CHAINHABITS__InsufficientERC20Allowance();\\nerror CHAINHABITS__ERC20TransferFailed();\\nerror CHAINHABITS__ERC20TokenNotSupported();\\nerror CHAINHABITS__ERC20DepositAmountIs0();\\nerror CHAINHABITS__PrivateInformation();\\nerror CHAINHABITS__ForfeitExceedsStake();\\n\\ncontract ChainHabits is ReentrancyGuard, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\n\\t//MODIFIERS\\n\\n\\tmodifier isUserNotRegistered(address _caller) {\\n\\t\\tif (isUserRegisteredTable[_caller]) {\\n\\t\\t\\trevert CHAINHABITS__UserAlreadyRegistered();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\tmodifier isUserRegistered(address _caller) {\\n\\t\\tif (!isUserRegisteredTable[_caller]) {\\n\\t\\t\\trevert CHAINHABITS__UserNotYetRegistered();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\tCounters.Counter private _challengeIdCounter;\\n\\n\\t// as we are using subgraph do we need this array ?\\n\\t// address[] public allUsers;\\n\\n\\t//datafeed\\n\\tAggregatorV3Interface internal dataFeed;\\n\\n\\t// STRUCTS\\n\\tstruct UserDetails {\\n\\t\\t// uint256 currentStaked;\\n\\t\\tuint256 userID; //fromstrava\\n\\t\\tstring refreshToken; //fromstrava\\n\\t}\\n\\n\\tstruct ChallengeDetails {\\n\\t\\tuint8 targetMiles;\\n\\t\\tuint8 NoOfWeeks;\\n\\t\\tuint8 failedWeeks;\\n\\t\\tbool isLive;\\n\\t\\tuint48 challengeStartDate;\\n\\t\\taddress defaultAddress;\\n\\t}\\n\\n\\t//create user profile\\n\\tmapping(address => bool) public isUserRegisteredTable;\\n\\tmapping(address => bool) public userHasLiveChallenge;\\n\\tmapping(address player => UserDetails) private userTable;\\n\\tmapping(uint256 challengeId => ChallengeDetails) public challengeTable;\\n\\tmapping(address user => uint256 challengeId) usersCurrentChallenge;\\n\\tmapping(address => uint256) public ForfeitedFundsToBeCollected;\\n\\tmapping(address => address) priceFeedAddress;\\n\\tmapping(address => mapping(address => uint256)) currentStakedByUser;\\n\\n\\t//EVENTS\\n\\tevent NewChallengeCreated(\\n\\t\\tuint256 indexed challengeId,\\n\\t\\taddress indexed user,\\n\\t\\tstring Objective,\\n\\t\\tuint8 startingMiles,\\n\\t\\tuint8 NumberofWeeks,\\n\\t\\tuint8 PercentageIncrease,\\n\\t\\taddress defaultAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress erc20Address\\n\\t);\\n\\t// indexed user\\n\\tevent NewUserRegistered(address indexed user);\\n\\tevent IntervalReviewCompleted(\\n\\t\\tuint256 indexed challengeId,\\n\\t\\taddress userAddress,\\n\\t\\tbool success\\n\\t);\\n\\t// indexed stakeForfeited added status\\n\\tevent ChallengeCompleted(\\n\\t\\tuint256 indexed challengeId,\\n\\t\\taddress indexed user,\\n\\t\\tbool status,\\n\\t\\tuint256 stakeForfeited\\n\\t);\\n\\tevent FundsWithdrawn(address indexed user, uint256 amount);\\n\\tevent ForfeitedFundsFailedToSend(address indexed user, uint256 amount);\\n\\n\\tconstructor() Ownable() {}\\n\\n\\t//Create New User Pofile\\n\\tfunction registerNewUser(\\n\\t\\tuint256 userID,\\n\\t\\tstring calldata _refreshToken\\n\\t) external isUserNotRegistered(msg.sender) {\\n\\t\\tuserTable[msg.sender] = UserDetails(userID, _refreshToken);\\n\\t\\tisUserRegisteredTable[msg.sender] = true;\\n\\t\\t// allUsers.push(msg.sender);\\n\\t\\temit NewUserRegistered(msg.sender);\\n\\t}\\n\\n\\tfunction createNewChallenge(\\n\\t\\tstring calldata _obj,\\n\\t\\tuint8 _targetMiles,\\n\\t\\tuint8 _weeks,\\n\\t\\taddress _forfeitAddress,\\n\\t\\tuint8 _percentageIncrease,\\n\\t\\taddress _erc20Address,\\n\\t\\tuint256 _depositAmount\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tisUserRegistered(msg.sender)\\n\\t\\treturns (uint256 challengeId)\\n\\t{\\n\\t\\t//one challenge at a time only\\n\\t\\tif (userHasLiveChallenge[msg.sender]) {\\n\\t\\t\\trevert CHAINHABITS__UserHasLiveObjective();\\n\\t\\t}\\n\\n\\t\\tif (_forfeitAddress == address(0) || _forfeitAddress == msg.sender) {\\n\\t\\t\\trevert CHAINHABITS__ForfeitAddressInvalid();\\n\\t\\t}\\n\\n\\t\\tuint256 requiredTokenAmount;\\n\\t\\tuint256 depositAmount;\\n\\n\\t\\t//TODO : Cannot send token and msg.value? or can?\\n\\t\\tif (_erc20Address != address(0)) {\\n\\t\\t\\tif (_depositAmount == 0) {\\n\\t\\t\\t\\trevert CHAINHABITS__ERC20DepositAmountIs0();\\n\\t\\t\\t}\\n\\t\\t\\taddress _priceFeedAddress = priceFeedAddress[_erc20Address];\\n\\n\\t\\t\\tif (_priceFeedAddress == address(0)) {\\n\\t\\t\\t\\trevert CHAINHABITS__ERC20TokenNotSupported();\\n\\t\\t\\t}\\n\\n\\t\\t\\tuint256 erc20Price = uint256(\\n\\t\\t\\t\\tgetChainlinkDataFeedLatestAnswer(_priceFeedAddress)\\n\\t\\t\\t);\\n\\n\\t\\t\\trequiredTokenAmount =\\n\\t\\t\\t\\t(_depositAmount * 1 ether) /\\n\\t\\t\\t\\t(erc20Price * 1e10);\\n\\n\\t\\t\\tIERC20 usdcToken = IERC20(_erc20Address);\\n\\t\\t\\tif (usdcToken.balanceOf(msg.sender) < requiredTokenAmount) {\\n\\t\\t\\t\\trevert CHAINHABITS__InsufficientERC20Balance();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (\\n\\t\\t\\t\\tusdcToken.allowance(msg.sender, address(this)) <\\n\\t\\t\\t\\trequiredTokenAmount\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert CHAINHABITS__InsufficientERC20Allowance();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!usdcToken.transferFrom(\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\trequiredTokenAmount\\n\\t\\t\\t\\t)\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert CHAINHABITS__ERC20TransferFailed();\\n\\t\\t\\t}\\n\\n\\t\\t\\tdepositAmount = _depositAmount;\\n\\t\\t\\tcurrentStakedByUser[msg.sender][\\n\\t\\t\\t\\t_erc20Address\\n\\t\\t\\t] += requiredTokenAmount;\\n\\t\\t} else {\\n\\t\\t\\tif (msg.value == 0) {\\n\\t\\t\\t\\trevert CHAINHABITS__StakeAmountisZero();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_challengeIdCounter.increment();\\n\\t\\tchallengeId = _challengeIdCounter.current();\\n\\n\\t\\tchallengeTable[challengeId] = ChallengeDetails(\\n\\t\\t\\t_targetMiles,\\n\\t\\t\\t_weeks,\\n\\t\\t\\t0,\\n\\t\\t\\ttrue,\\n\\t\\t\\tuint48(block.timestamp), //initialy start date\\n\\t\\t\\t_forfeitAddress\\n\\t\\t);\\n\\n\\t\\tusersCurrentChallenge[msg.sender] = challengeId; //record current challenge for user\\n\\n\\t\\tif (_erc20Address == address(0)) {\\n\\t\\t\\tdepositAmount = msg.value;\\n\\t\\t\\tcurrentStakedByUser[msg.sender][address(0)] += (msg.value);\\n\\t\\t}\\n\\n\\t\\tuserHasLiveChallenge[msg.sender] = true;\\n\\n\\t\\t//emit new challenge events\\n\\t\\temit NewChallengeCreated(\\n\\t\\t\\tchallengeId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_obj,\\n\\t\\t\\t_targetMiles,\\n\\t\\t\\t_weeks,\\n\\t\\t\\t_percentageIncrease,\\n\\t\\t\\t_forfeitAddress,\\n\\t\\t\\tdepositAmount,\\n\\t\\t\\t_erc20Address\\n\\t\\t);\\n\\t}\\n\\n\\t//handle challenge review logic what about passing args as arr of objs and iteration of it instead of calling individualy will that reduce the excecution gas.\\n\\tfunction handleIntervalReview(\\n\\t\\tuint256 _challengeId,\\n\\t\\taddress _user,\\n\\t\\tbool failed\\n\\t) external onlyOwner {\\n\\t\\t//Could check if challengeId is live\\n\\t\\tif (!_isChallengeLive(_challengeId)) {\\n\\t\\t\\trevert CHAINHABITS__ChallengeNotLive();\\n\\t\\t}\\n\\t\\t//if user is owner of challenge\\n\\t\\tif (_getChallengeId(_user) != _challengeId) {\\n\\t\\t\\trevert CHAINHABITS__IncorrectAddressORChallengeId();\\n\\t\\t}\\n\\t\\tif (failed) {\\n\\t\\t\\tchallengeTable[_challengeId].failedWeeks++;\\n\\t\\t}\\n\\t\\temit IntervalReviewCompleted(_challengeId, _user, failed);\\n\\t}\\n\\n\\t//TODO - testing a bulk interval review function\\n\\tfunction handleBulkIntervalReview(\\n\\t\\tuint256[] calldata _challengeId,\\n\\t\\taddress[] calldata _user,\\n\\t\\tbool[] calldata failed\\n\\t) external onlyOwner {\\n\\t\\tfor (uint16 i = 0; i < _challengeId.length; i++) {\\n\\t\\t\\tif (failed[i]) {\\n\\t\\t\\t\\tchallengeTable[_challengeId[i]].failedWeeks++;\\n\\t\\t\\t}\\n\\t\\t\\temit IntervalReviewCompleted(_challengeId[i], _user[i], failed[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t//handle close challenge\\n\\tfunction handleCompleteChallengeETH(\\n\\t\\tuint256 _challengeID,\\n\\t\\tuint256 _stakeForfeited,\\n\\t\\taddress _userAddress,\\n\\t\\taddress _erc20Address\\n\\t) external onlyOwner nonReentrant {\\n\\t\\trequire(_erc20Address == address(0) , \\\"This function expects zero address\\\");\\n\\t\\tif (_stakeForfeited > 0) {\\n\\t\\t\\taddress forfeitAddress = challengeTable[_challengeID]\\n\\t\\t\\t\\t.defaultAddress;\\n\\t\\t\\t//check that _stakeForfeit is less than amount staked by user\\n\\t\\t\\tif (\\n\\t\\t\\t\\t_stakeForfeited >\\n\\t\\t\\t\\tcurrentStakedByUser[_userAddress][_erc20Address]\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert CHAINHABITS__ForfeitExceedsStake();\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentStakedByUser[_userAddress][_erc20Address] -= _stakeForfeited;\\n\\t\\t\\tchallengeTable[_challengeID].isLive = false;\\n\\t\\t\\t\\n\\t\\t\\t//IF ETH Deposit\\n\\t\\t\\t(bool sent, ) = forfeitAddress.call{ value: _stakeForfeited }(\\\"\\\");\\n\\n\\t\\t\\tif (!sent) {\\n\\t\\t\\t\\tForfeitedFundsToBeCollected[forfeitAddress] += _stakeForfeited;\\n\\t\\t\\t\\temit ForfeitedFundsFailedToSend(\\n\\t\\t\\t\\t\\tforfeitAddress,\\n\\t\\t\\t\\t\\t_stakeForfeited\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tusersCurrentChallenge[_userAddress] = 0;\\n\\t\\tuserHasLiveChallenge[_userAddress] = false;\\n\\t\\temit ChallengeCompleted(_challengeID, _userAddress, true, _stakeForfeited);\\n\\t}\\n\\n\\tfunction handleCompleteChallengeERC20(\\n\\t\\tuint256 _challengeID,\\n\\t\\tuint256 _stakeForfeited,\\n\\t\\taddress _userAddress,\\n\\t\\taddress _erc20Address\\n\\t) external onlyOwner nonReentrant {\\n\\t\\tif (_stakeForfeited > 0) {\\n\\t\\t\\taddress forfeitAddress = challengeTable[_challengeID]\\n\\t\\t\\t\\t.defaultAddress;\\n\\t\\t\\t//check that _stakeForfeit is less than amount staked by user\\n\\t\\t\\tif (\\n\\t\\t\\t\\t_stakeForfeited >\\n\\t\\t\\t\\tcurrentStakedByUser[_userAddress][_erc20Address]\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert CHAINHABITS__ForfeitExceedsStake();\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurrentStakedByUser[_userAddress][_erc20Address] -= _stakeForfeited;\\n\\t\\t\\tchallengeTable[_challengeID].isLive = false;\\n\\n\\t\\t\\tIERC20 usdcToken = IERC20(_erc20Address);\\n\\t\\t\\tbool success = usdcToken.transfer(forfeitAddress, _stakeForfeited);\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\tForfeitedFundsToBeCollected[forfeitAddress] += _stakeForfeited;\\n\\t\\t\\t\\tconsole.log(\\\"forfeitTransactionFailed\\\");\\n\\t\\t\\t\\temit ForfeitedFundsFailedToSend(\\n\\t\\t\\t\\t\\tforfeitAddress,\\n\\t\\t\\t\\t\\t_stakeForfeited\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tusersCurrentChallenge[_userAddress] = 0;\\n\\t\\tuserHasLiveChallenge[_userAddress] = false;\\n\\t\\temit ChallengeCompleted(_challengeID, _userAddress, true, _stakeForfeited);\\n\\t}\\n\\n\\t//withdraw funds\\n\\tfunction withdrawFunds(\\n\\t\\taddress _erc20Address\\n\\t) external nonReentrant isUserRegistered(msg.sender) {\\n\\t\\tif (userHasLiveChallenge[msg.sender]) {\\n\\t\\t\\trevert CHAINHABITS__ChallengeStillActive();\\n\\t\\t}\\n\\n\\t\\tuint256 withdrawAmount = currentStakedByUser[msg.sender][_erc20Address];\\n\\n\\t\\tif (withdrawAmount == 0) {\\n\\t\\t\\trevert CHAINHABITS__InsufficientFunds();\\n\\t\\t}\\n\\n\\t\\tcurrentStakedByUser[msg.sender][_erc20Address] = 0; //else set to amount staked to 0\\n\\n\\t\\tif (_erc20Address == address(0)) {\\n\\t\\t\\t(bool success, ) = msg.sender.call{ value: withdrawAmount }(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Transfer failed\\\");\\n\\t\\t} else {\\n\\t\\t\\tIERC20 usdcToken = IERC20(_erc20Address);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tusdcToken.transfer(msg.sender, withdrawAmount),\\n\\t\\t\\t\\t\\\"transferFailed\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit FundsWithdrawn(msg.sender, withdrawAmount);\\n\\t}\\n\\n\\t//setter - TODO this needs to be removed when we incorporate the encrypted database\\n\\tfunction updateRefreshToken(\\n\\t\\taddress _user,\\n\\t\\tstring calldata _refreshToken\\n\\t) external onlyOwner {\\n\\t\\tuserTable[_user].refreshToken = _refreshToken;\\n\\t}\\n\\n\\t//\\n\\tfunction addPriceFeedAddress(\\n\\t\\taddress erc20Address,\\n\\t\\taddress _priceFeedAddress\\n\\t) external onlyOwner {\\n\\t\\tpriceFeedAddress[erc20Address] = _priceFeedAddress;\\n\\t}\\n\\n\\t//Helper - Internal\\n\\tfunction _isChallengeLive(uint256 _challengeId) public view returns (bool) {\\n\\t\\treturn challengeTable[_challengeId].isLive;\\n\\t}\\n\\n\\tfunction _getChallengeId(\\n\\t\\taddress _userAddress\\n\\t) internal view returns (uint256) {\\n\\t\\treturn usersCurrentChallenge[_userAddress];\\n\\t}\\n\\n\\t//get priceFeed data\\n\\tfunction getChainlinkDataFeedLatestAnswer(\\n\\t\\taddress _priceFeedAddress\\n\\t) internal returns (int) {\\n\\t\\tdataFeed = AggregatorV3Interface(_priceFeedAddress);\\n\\t\\t(\\n\\t\\t\\t,\\n\\t\\t\\t/* uint80 roundID */ int answer /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\n\\t\\t\\t,\\n\\t\\t\\t,\\n\\n\\t\\t) = dataFeed.latestRoundData();\\n\\t\\treturn answer;\\n\\t}\\n\\n\\t//GETTER FUNCTIONS\\n\\tfunction getUserDetails(\\n\\t\\taddress _user\\n\\t) external view returns (UserDetails memory) {\\n\\t\\treturn userTable[_user];\\n\\t}\\n\\n\\t//GETTER FUNCTIONS\\n\\tfunction getUserStake(\\n\\t\\taddress _user,\\n\\t\\taddress _token\\n\\t) public view returns (uint256) {\\n\\t\\tif (msg.sender != owner() && msg.sender != _user) {\\n\\t\\t\\trevert CHAINHABITS__PrivateInformation();\\n\\t\\t}\\n\\t\\treturn currentStakedByUser[_user][_token]; // address(0) is expected for the eth balance\\n\\t}\\n\\n\\tfunction getChallengeDetails(\\n\\t\\tuint256 _challengeId\\n\\t) external view returns (ChallengeDetails memory) {\\n\\t\\treturn challengeTable[_challengeId];\\n\\t}\\n\\n\\tfunction getChallengeId(\\n\\t\\taddress _userAddress\\n\\t) external view returns (uint256) {\\n\\t\\treturn usersCurrentChallenge[_userAddress];\\n\\t}\\n}\\n\",\"keccak256\":\"0xc20054164e2a399ee55dcc6cb5dfccbeb52833cfa8ebd299cb81439b4e556afa\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561001f33610024565b610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6122d5806100856000396000f3fe60806040526004361061012a5760003560e01c8063715018a6116100ab578063addb889d1161006f578063addb889d146104f0578063cc3d967b14610520578063d0a2a9401461054d578063e30a39241461057d578063f2fde38b146105b3578063fb24a703146105d357600080fd5b8063715018a61461042c57806383debc40146104415780638da5cb5b14610488578063905d0c11146104b057806391ecc316146104d057600080fd5b80632eb32487116100f25780632eb32487146102705780633710d4c7146102915780633d40a54f146102b15780634aeb8b60146103df57806368742da61461040c57600080fd5b80630d63efa71461012f578063113adc8014610151578063232171d21461021057806326722884146102305780632d60879b14610250575b600080fd5b34801561013b57600080fd5b5061014f61014a366004611af3565b6105f3565b005b34801561015d57600080fd5b506101c161016c366004611b46565b60076020526000908152604090205460ff8082169161010081048216916201000082048116916301000000810490911690640100000000810465ffffffffffff1690600160501b90046001600160a01b031686565b6040805160ff9788168152958716602087015293909516928401929092521515606083015265ffffffffffff1660808201526001600160a01b0390911660a082015260c0015b60405180910390f35b34801561021c57600080fd5b5061014f61022b366004611ba4565b610627565b34801561023c57600080fd5b5061014f61024b366004611c3e565b6107a3565b34801561025c57600080fd5b5061014f61026b366004611c7f565b6107d9565b61028361027e366004611cd0565b6108e4565b604051908152602001610207565b34801561029d57600080fd5b506102836102ac366004611c3e565b610ea1565b3480156102bd57600080fd5b5061037e6102cc366004611b46565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260076020908152604091829020825160c081018452905460ff808216835261010082048116938301939093526201000081048316938201939093526301000000830490911615156060820152640100000000820465ffffffffffff166080820152600160501b9091046001600160a01b031660a082015290565b60408051825160ff908116825260208085015182169083015283830151169181019190915260608083015115159082015260808083015165ffffffffffff169082015260a0918201516001600160a01b03169181019190915260c001610207565b3480156103eb57600080fd5b506102836103fa366004611d70565b60096020526000908152604090205481565b34801561041857600080fd5b5061014f610427366004611d70565b610f2b565b34801561043857600080fd5b5061014f61118f565b34801561044d57600080fd5b5061047861045c366004611b46565b6000908152600760205260409020546301000000900460ff1690565b6040519015158152602001610207565b34801561049457600080fd5b506001546040516001600160a01b039091168152602001610207565b3480156104bc57600080fd5b5061014f6104cb366004611d92565b6111a3565b3480156104dc57600080fd5b5061014f6104eb366004611d92565b61140a565b3480156104fc57600080fd5b5061047861050b366004611d70565b60046020526000908152604090205460ff1681565b34801561052c57600080fd5b5061054061053b366004611d70565b611659565b6040516102079190611e1e565b34801561055957600080fd5b50610478610568366004611d70565b60056020526000908152604090205460ff1681565b34801561058957600080fd5b50610283610598366004611d70565b6001600160a01b031660009081526008602052604090205490565b3480156105bf57600080fd5b5061014f6105ce366004611d70565b611733565b3480156105df57600080fd5b5061014f6105ee366004611e4b565b6117a9565b6105fb611896565b6001600160a01b0383166000908152600660205260409020600101610621828483611f1d565b50505050565b61062f611896565b60005b61ffff811686111561079a5782828261ffff1681811061065457610654611fde565b90506020020160208101906106699190611ff4565b156106d2576007600088888461ffff1681811061068857610688611fde565b60209081029290920135835250810191909152604001600020805462010000900460ff169060026106b883612027565b91906101000a81548160ff021916908360ff160217905550505b86868261ffff168181106106e8576106e8611fde565b905060200201357fbb6465b408d119d4c36c57969ba1b88461ebcb8a353206c139218374793e25e086868461ffff1681811061072657610726611fde565b905060200201602081019061073b9190611d70565b85858561ffff1681811061075157610751611fde565b90506020020160208101906107669190611ff4565b604080516001600160a01b03909316835290151560208301520160405180910390a28061079281612046565b915050610632565b50505050505050565b6107ab611896565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b6107e1611896565b6000838152600760205260409020546301000000900460ff16610817576040516350bcced360e11b815260040160405180910390fd5b82610837836001600160a01b031660009081526008602052604090205490565b1461085557604051637db115b960e11b815260040160405180910390fd5b801561089a576000838152600760205260409020805462010000900460ff1690600261088083612027565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160a01b0384168152821515602082015284917fbb6465b408d119d4c36c57969ba1b88461ebcb8a353206c139218374793e25e0910160405180910390a2505050565b3360008181526004602052604081205490919060ff1661091757604051632ac0e50f60e11b815260040160405180910390fd5b3360009081526005602052604090205460ff1615610948576040516309c71c6d60e11b815260040160405180910390fd5b6001600160a01b038616158061096657506001600160a01b03861633145b156109845760405163e11ddadb60e01b815260040160405180910390fd5b6000806001600160a01b03861615610c1d57846000036109b757604051634966419160e01b815260040160405180910390fd5b6001600160a01b038087166000908152600a602052604090205416806109f0576040516350d3188d60e01b815260040160405180910390fd5b60006109fb826118f0565b9050610a0c816402540be400612067565b610a1e88670de0b6b3a7640000612067565b610a28919061207e565b6040516370a0823160e01b8152336004820152909450889085906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9791906120a0565b1015610ab65760405163a9c748cf60e01b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906120a0565b1015610b4557604051632549682960e21b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906120b9565b610bd9576040516338f9005360e11b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038d168452909152812080548a9650879290610c0f9084906120d6565b90915550610c3e9350505050565b34600003610c3e5760405163b8970e7d60e01b815260040160405180910390fd5b610c4c600280546001019055565b60025493506040518060c001604052808b60ff1681526020018a60ff168152602001600060ff1681526020016001151581526020014265ffffffffffff168152602001896001600160a01b03168152506007600086815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff02191690831515021790555060808201518160000160046101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508360086000336001600160a01b03166001600160a01b031681526020019081526020016000208190555060006001600160a01b0316866001600160a01b031603610e045750336000908152600b60209081526040808320838052909152812080543492839291610dfe9084906120d6565b90915550505b600160056000336001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550336001600160a01b0316847f30fb1bf04d8122226de25fef6ab4b12502c98d1e295f77bd346119715461d8db8e8e8e8e8d8f898f604051610e8a9897969594939291906120e9565b60405180910390a350505098975050505050505050565b6000610eb56001546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015610edf5750336001600160a01b03841614155b15610efd5760405163250c1a4160e21b815260040160405180910390fd5b506001600160a01b038083166000908152600b60209081526040808320938516835292905220545b92915050565b610f33611980565b3360008181526004602052604090205460ff16610f6357604051632ac0e50f60e11b815260040160405180910390fd5b3360009081526005602052604090205460ff1615610f94576040516327562e6160e11b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038616845290915281205490819003610fd9576040516329bd6d0160e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038716808552925282209190915561109957604051600090339083908381818185875af1925050503d8060008114611046576040519150601f19603f3d011682016040523d82523d6000602084013e61104b565b606091505b50509050806110935760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b5061114b565b60405163a9059cbb60e01b81523360048201526024810182905283906001600160a01b0382169063a9059cbb906044016020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c91906120b9565b6111495760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b9cd9995c91985a5b195960921b604482015260640161108a565b505b60405181815233907feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d9060200160405180910390a2505061118c6001600055565b50565b611197611896565b6111a160006119d9565b565b6111ab611896565b6111b3611980565b8215611398576000848152600760209081526040808320546001600160a01b038681168552600b84528285208682168652909352922054600160501b9092041690841115611214576040516367bf03fb60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600b602090815260408083209386168352929052908120805486929061124b90849061214f565b9091555050600085815260076020526040808220805463ff000000191690555163a9059cbb60e01b81526001600160a01b038381166004830152602482018790528492919083169063a9059cbb906044016020604051808303816000875af11580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df91906120b9565b905080611394576001600160a01b0383166000908152600960205260408120805488929061130e9084906120d6565b909155505060408051808201909152601881527f666f72666569745472616e73616374696f6e4661696c65640000000000000000602082015261135090611a2b565b826001600160a01b03167f5d8db02abf15860359f6352f1047af87398b4b3885000b032fa7ffc8854b45718760405161138b91815260200190565b60405180910390a25b5050505b6001600160a01b03821660008181526008602090815260408083208390556005825291829020805460ff1916905581516001815290810186905286917ff531285ca704745eddab0f3ffd7e758c9d25cc5307e3c886d15ed35f880c6ee191015b60405180910390a36106216001600055565b611412611896565b61141a611980565b6001600160a01b0381161561147c5760405162461bcd60e51b815260206004820152602260248201527f546869732066756e6374696f6e2065787065637473207a65726f206164647265604482015261737360f01b606482015260840161108a565b8215611398576000848152600760209081526040808320546001600160a01b038681168552600b84528285208682168652909352922054600160501b90920416908411156114dd576040516367bf03fb60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600b602090815260408083209386168352929052908120805486929061151490849061214f565b9091555050600085815260076020526040808220805463ff00000019169055516001600160a01b0383169086908381818185875af1925050503d8060008114611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b50509050806115f3576001600160a01b038216600090815260096020526040812080548792906115af9084906120d6565b90915550506040518581526001600160a01b038316907f5d8db02abf15860359f6352f1047af87398b4b3885000b032fa7ffc8854b45719060200160405180910390a25b50506001600160a01b03821660008181526008602090815260408083208390556005825291829020805460ff1916905581516001815290810186905286917ff531285ca704745eddab0f3ffd7e758c9d25cc5307e3c886d15ed35f880c6ee191016113f8565b6040805180820190915260008152606060208201526001600160a01b03821660009081526006602090815260409182902082518084019093528054835260018101805491928401916116aa90611e94565b80601f01602080910402602001604051908101604052809291908181526020018280546116d690611e94565b80156117235780601f106116f857610100808354040283529160200191611723565b820191906000526020600020905b81548152906001019060200180831161170657829003601f168201915b5050505050815250509050919050565b61173b611896565b6001600160a01b0381166117a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161108a565b61118c816119d9565b3360008181526004602052604090205460ff16156117da57604051632f22a0e560e01b815260040160405180910390fd5b604051806040016040528085815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250503381526006602090815260409091208351815590830151909150600182019061184c9082612162565b505033600081815260046020526040808220805460ff19166001179055519192507ff382cb45b37e0f2786ad5a8328040a5c6a63584130f9076ba1627d420ffadc8b91a250505050565b6001546001600160a01b031633146111a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161108a565b600380546001600160a01b0319166001600160a01b03831690811790915560408051633fabe5a360e21b815290516000928392909163feaf968c9160048082019260a0929091908290030181865afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611974919061223c565b50919695505050505050565b6002600054036119d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161108a565b6002600055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61118c81604051602401611a3f919061228c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261118c8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b0381168114611aa557600080fd5b919050565b60008083601f840112611abc57600080fd5b50813567ffffffffffffffff811115611ad457600080fd5b602083019150836020828501011115611aec57600080fd5b9250929050565b600080600060408486031215611b0857600080fd5b611b1184611a8e565b9250602084013567ffffffffffffffff811115611b2d57600080fd5b611b3986828701611aaa565b9497909650939450505050565b600060208284031215611b5857600080fd5b5035919050565b60008083601f840112611b7157600080fd5b50813567ffffffffffffffff811115611b8957600080fd5b6020830191508360208260051b8501011115611aec57600080fd5b60008060008060008060608789031215611bbd57600080fd5b863567ffffffffffffffff80821115611bd557600080fd5b611be18a838b01611b5f565b90985096506020890135915080821115611bfa57600080fd5b611c068a838b01611b5f565b90965094506040890135915080821115611c1f57600080fd5b50611c2c89828a01611b5f565b979a9699509497509295939492505050565b60008060408385031215611c5157600080fd5b611c5a83611a8e565b9150611c6860208401611a8e565b90509250929050565b801515811461118c57600080fd5b600080600060608486031215611c9457600080fd5b83359250611ca460208501611a8e565b91506040840135611cb481611c71565b809150509250925092565b803560ff81168114611aa557600080fd5b60008060008060008060008060e0898b031215611cec57600080fd5b883567ffffffffffffffff811115611d0357600080fd5b611d0f8b828c01611aaa565b9099509750611d22905060208a01611cbf565b9550611d3060408a01611cbf565b9450611d3e60608a01611a8e565b9350611d4c60808a01611cbf565b9250611d5a60a08a01611a8e565b915060c089013590509295985092959890939650565b600060208284031215611d8257600080fd5b611d8b82611a8e565b9392505050565b60008060008060808587031215611da857600080fd5b8435935060208501359250611dbf60408601611a8e565b9150611dcd60608601611a8e565b905092959194509250565b6000815180845260005b81811015611dfe57602081850181015186830182015201611de2565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151602082015260006020830151604080840152611e436060840182611dd8565b949350505050565b600080600060408486031215611e6057600080fd5b83359250602084013567ffffffffffffffff811115611b2d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611ea857607f821691505b602082108103611ec857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f1857600081815260208120601f850160051c81016020861015611ef55750805b601f850160051c820191505b81811015611f1457828155600101611f01565b5050505b505050565b67ffffffffffffffff831115611f3557611f35611e7e565b611f4983611f438354611e94565b83611ece565b6000601f841160018114611f7d5760008515611f655750838201355b600019600387901b1c1916600186901b178355611fd7565b600083815260209020601f19861690835b82811015611fae5786850135825560209485019460019092019101611f8e565b5086821015611fcb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561200657600080fd5b8135611d8b81611c71565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361203d5761203d612011565b60010192915050565b600061ffff80831681810361205d5761205d612011565b6001019392505050565b8082028115828204841417610f2557610f25612011565b60008261209b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156120b257600080fd5b5051919050565b6000602082840312156120cb57600080fd5b8151611d8b81611c71565b80820180821115610f2557610f25612011565b60e081528760e08201526000610100898b8285013760008a840182015260ff98891660208401529688166040830152509390951660608401526001600160a01b03918216608084015260a083015290921660c0830152601f909201601f19160101919050565b81810381811115610f2557610f25612011565b815167ffffffffffffffff81111561217c5761217c611e7e565b6121908161218a8454611e94565b84611ece565b602080601f8311600181146121c557600084156121ad5750858301515b600019600386901b1c1916600185901b178555611f14565b600085815260208120601f198616915b828110156121f4578886015182559484019460019091019084016121d5565b50858210156122125787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b805169ffffffffffffffffffff81168114611aa557600080fd5b600080600080600060a0868803121561225457600080fd5b61225d86612222565b945060208601519350604086015192506060860151915061228060808701612222565b90509295509295909350565b602081526000611d8b6020830184611dd856fea2646970667358221220f989a0637b14558269eeb3d075afb2d60872292b8b9f5c0432bc0043ed8f4cd564736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063715018a6116100ab578063addb889d1161006f578063addb889d146104f0578063cc3d967b14610520578063d0a2a9401461054d578063e30a39241461057d578063f2fde38b146105b3578063fb24a703146105d357600080fd5b8063715018a61461042c57806383debc40146104415780638da5cb5b14610488578063905d0c11146104b057806391ecc316146104d057600080fd5b80632eb32487116100f25780632eb32487146102705780633710d4c7146102915780633d40a54f146102b15780634aeb8b60146103df57806368742da61461040c57600080fd5b80630d63efa71461012f578063113adc8014610151578063232171d21461021057806326722884146102305780632d60879b14610250575b600080fd5b34801561013b57600080fd5b5061014f61014a366004611af3565b6105f3565b005b34801561015d57600080fd5b506101c161016c366004611b46565b60076020526000908152604090205460ff8082169161010081048216916201000082048116916301000000810490911690640100000000810465ffffffffffff1690600160501b90046001600160a01b031686565b6040805160ff9788168152958716602087015293909516928401929092521515606083015265ffffffffffff1660808201526001600160a01b0390911660a082015260c0015b60405180910390f35b34801561021c57600080fd5b5061014f61022b366004611ba4565b610627565b34801561023c57600080fd5b5061014f61024b366004611c3e565b6107a3565b34801561025c57600080fd5b5061014f61026b366004611c7f565b6107d9565b61028361027e366004611cd0565b6108e4565b604051908152602001610207565b34801561029d57600080fd5b506102836102ac366004611c3e565b610ea1565b3480156102bd57600080fd5b5061037e6102cc366004611b46565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260076020908152604091829020825160c081018452905460ff808216835261010082048116938301939093526201000081048316938201939093526301000000830490911615156060820152640100000000820465ffffffffffff166080820152600160501b9091046001600160a01b031660a082015290565b60408051825160ff908116825260208085015182169083015283830151169181019190915260608083015115159082015260808083015165ffffffffffff169082015260a0918201516001600160a01b03169181019190915260c001610207565b3480156103eb57600080fd5b506102836103fa366004611d70565b60096020526000908152604090205481565b34801561041857600080fd5b5061014f610427366004611d70565b610f2b565b34801561043857600080fd5b5061014f61118f565b34801561044d57600080fd5b5061047861045c366004611b46565b6000908152600760205260409020546301000000900460ff1690565b6040519015158152602001610207565b34801561049457600080fd5b506001546040516001600160a01b039091168152602001610207565b3480156104bc57600080fd5b5061014f6104cb366004611d92565b6111a3565b3480156104dc57600080fd5b5061014f6104eb366004611d92565b61140a565b3480156104fc57600080fd5b5061047861050b366004611d70565b60046020526000908152604090205460ff1681565b34801561052c57600080fd5b5061054061053b366004611d70565b611659565b6040516102079190611e1e565b34801561055957600080fd5b50610478610568366004611d70565b60056020526000908152604090205460ff1681565b34801561058957600080fd5b50610283610598366004611d70565b6001600160a01b031660009081526008602052604090205490565b3480156105bf57600080fd5b5061014f6105ce366004611d70565b611733565b3480156105df57600080fd5b5061014f6105ee366004611e4b565b6117a9565b6105fb611896565b6001600160a01b0383166000908152600660205260409020600101610621828483611f1d565b50505050565b61062f611896565b60005b61ffff811686111561079a5782828261ffff1681811061065457610654611fde565b90506020020160208101906106699190611ff4565b156106d2576007600088888461ffff1681811061068857610688611fde565b60209081029290920135835250810191909152604001600020805462010000900460ff169060026106b883612027565b91906101000a81548160ff021916908360ff160217905550505b86868261ffff168181106106e8576106e8611fde565b905060200201357fbb6465b408d119d4c36c57969ba1b88461ebcb8a353206c139218374793e25e086868461ffff1681811061072657610726611fde565b905060200201602081019061073b9190611d70565b85858561ffff1681811061075157610751611fde565b90506020020160208101906107669190611ff4565b604080516001600160a01b03909316835290151560208301520160405180910390a28061079281612046565b915050610632565b50505050505050565b6107ab611896565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b6107e1611896565b6000838152600760205260409020546301000000900460ff16610817576040516350bcced360e11b815260040160405180910390fd5b82610837836001600160a01b031660009081526008602052604090205490565b1461085557604051637db115b960e11b815260040160405180910390fd5b801561089a576000838152600760205260409020805462010000900460ff1690600261088083612027565b91906101000a81548160ff021916908360ff160217905550505b604080516001600160a01b0384168152821515602082015284917fbb6465b408d119d4c36c57969ba1b88461ebcb8a353206c139218374793e25e0910160405180910390a2505050565b3360008181526004602052604081205490919060ff1661091757604051632ac0e50f60e11b815260040160405180910390fd5b3360009081526005602052604090205460ff1615610948576040516309c71c6d60e11b815260040160405180910390fd5b6001600160a01b038616158061096657506001600160a01b03861633145b156109845760405163e11ddadb60e01b815260040160405180910390fd5b6000806001600160a01b03861615610c1d57846000036109b757604051634966419160e01b815260040160405180910390fd5b6001600160a01b038087166000908152600a602052604090205416806109f0576040516350d3188d60e01b815260040160405180910390fd5b60006109fb826118f0565b9050610a0c816402540be400612067565b610a1e88670de0b6b3a7640000612067565b610a28919061207e565b6040516370a0823160e01b8152336004820152909450889085906001600160a01b038316906370a0823190602401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9791906120a0565b1015610ab65760405163a9c748cf60e01b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2691906120a0565b1015610b4557604051632549682960e21b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc91906120b9565b610bd9576040516338f9005360e11b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038d168452909152812080548a9650879290610c0f9084906120d6565b90915550610c3e9350505050565b34600003610c3e5760405163b8970e7d60e01b815260040160405180910390fd5b610c4c600280546001019055565b60025493506040518060c001604052808b60ff1681526020018a60ff168152602001600060ff1681526020016001151581526020014265ffffffffffff168152602001896001600160a01b03168152506007600086815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff02191690831515021790555060808201518160000160046101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001600a6101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508360086000336001600160a01b03166001600160a01b031681526020019081526020016000208190555060006001600160a01b0316866001600160a01b031603610e045750336000908152600b60209081526040808320838052909152812080543492839291610dfe9084906120d6565b90915550505b600160056000336001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550336001600160a01b0316847f30fb1bf04d8122226de25fef6ab4b12502c98d1e295f77bd346119715461d8db8e8e8e8e8d8f898f604051610e8a9897969594939291906120e9565b60405180910390a350505098975050505050505050565b6000610eb56001546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015610edf5750336001600160a01b03841614155b15610efd5760405163250c1a4160e21b815260040160405180910390fd5b506001600160a01b038083166000908152600b60209081526040808320938516835292905220545b92915050565b610f33611980565b3360008181526004602052604090205460ff16610f6357604051632ac0e50f60e11b815260040160405180910390fd5b3360009081526005602052604090205460ff1615610f94576040516327562e6160e11b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038616845290915281205490819003610fd9576040516329bd6d0160e01b815260040160405180910390fd5b336000908152600b602090815260408083206001600160a01b038716808552925282209190915561109957604051600090339083908381818185875af1925050503d8060008114611046576040519150601f19603f3d011682016040523d82523d6000602084013e61104b565b606091505b50509050806110935760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b5061114b565b60405163a9059cbb60e01b81523360048201526024810182905283906001600160a01b0382169063a9059cbb906044016020604051808303816000875af11580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c91906120b9565b6111495760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b9cd9995c91985a5b195960921b604482015260640161108a565b505b60405181815233907feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d9060200160405180910390a2505061118c6001600055565b50565b611197611896565b6111a160006119d9565b565b6111ab611896565b6111b3611980565b8215611398576000848152600760209081526040808320546001600160a01b038681168552600b84528285208682168652909352922054600160501b9092041690841115611214576040516367bf03fb60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600b602090815260408083209386168352929052908120805486929061124b90849061214f565b9091555050600085815260076020526040808220805463ff000000191690555163a9059cbb60e01b81526001600160a01b038381166004830152602482018790528492919083169063a9059cbb906044016020604051808303816000875af11580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df91906120b9565b905080611394576001600160a01b0383166000908152600960205260408120805488929061130e9084906120d6565b909155505060408051808201909152601881527f666f72666569745472616e73616374696f6e4661696c65640000000000000000602082015261135090611a2b565b826001600160a01b03167f5d8db02abf15860359f6352f1047af87398b4b3885000b032fa7ffc8854b45718760405161138b91815260200190565b60405180910390a25b5050505b6001600160a01b03821660008181526008602090815260408083208390556005825291829020805460ff1916905581516001815290810186905286917ff531285ca704745eddab0f3ffd7e758c9d25cc5307e3c886d15ed35f880c6ee191015b60405180910390a36106216001600055565b611412611896565b61141a611980565b6001600160a01b0381161561147c5760405162461bcd60e51b815260206004820152602260248201527f546869732066756e6374696f6e2065787065637473207a65726f206164647265604482015261737360f01b606482015260840161108a565b8215611398576000848152600760209081526040808320546001600160a01b038681168552600b84528285208682168652909352922054600160501b90920416908411156114dd576040516367bf03fb60e01b815260040160405180910390fd5b6001600160a01b038084166000908152600b602090815260408083209386168352929052908120805486929061151490849061214f565b9091555050600085815260076020526040808220805463ff00000019169055516001600160a01b0383169086908381818185875af1925050503d8060008114611579576040519150601f19603f3d011682016040523d82523d6000602084013e61157e565b606091505b50509050806115f3576001600160a01b038216600090815260096020526040812080548792906115af9084906120d6565b90915550506040518581526001600160a01b038316907f5d8db02abf15860359f6352f1047af87398b4b3885000b032fa7ffc8854b45719060200160405180910390a25b50506001600160a01b03821660008181526008602090815260408083208390556005825291829020805460ff1916905581516001815290810186905286917ff531285ca704745eddab0f3ffd7e758c9d25cc5307e3c886d15ed35f880c6ee191016113f8565b6040805180820190915260008152606060208201526001600160a01b03821660009081526006602090815260409182902082518084019093528054835260018101805491928401916116aa90611e94565b80601f01602080910402602001604051908101604052809291908181526020018280546116d690611e94565b80156117235780601f106116f857610100808354040283529160200191611723565b820191906000526020600020905b81548152906001019060200180831161170657829003601f168201915b5050505050815250509050919050565b61173b611896565b6001600160a01b0381166117a05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161108a565b61118c816119d9565b3360008181526004602052604090205460ff16156117da57604051632f22a0e560e01b815260040160405180910390fd5b604051806040016040528085815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250503381526006602090815260409091208351815590830151909150600182019061184c9082612162565b505033600081815260046020526040808220805460ff19166001179055519192507ff382cb45b37e0f2786ad5a8328040a5c6a63584130f9076ba1627d420ffadc8b91a250505050565b6001546001600160a01b031633146111a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161108a565b600380546001600160a01b0319166001600160a01b03831690811790915560408051633fabe5a360e21b815290516000928392909163feaf968c9160048082019260a0929091908290030181865afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611974919061223c565b50919695505050505050565b6002600054036119d25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161108a565b6002600055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61118c81604051602401611a3f919061228c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261118c8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b0381168114611aa557600080fd5b919050565b60008083601f840112611abc57600080fd5b50813567ffffffffffffffff811115611ad457600080fd5b602083019150836020828501011115611aec57600080fd5b9250929050565b600080600060408486031215611b0857600080fd5b611b1184611a8e565b9250602084013567ffffffffffffffff811115611b2d57600080fd5b611b3986828701611aaa565b9497909650939450505050565b600060208284031215611b5857600080fd5b5035919050565b60008083601f840112611b7157600080fd5b50813567ffffffffffffffff811115611b8957600080fd5b6020830191508360208260051b8501011115611aec57600080fd5b60008060008060008060608789031215611bbd57600080fd5b863567ffffffffffffffff80821115611bd557600080fd5b611be18a838b01611b5f565b90985096506020890135915080821115611bfa57600080fd5b611c068a838b01611b5f565b90965094506040890135915080821115611c1f57600080fd5b50611c2c89828a01611b5f565b979a9699509497509295939492505050565b60008060408385031215611c5157600080fd5b611c5a83611a8e565b9150611c6860208401611a8e565b90509250929050565b801515811461118c57600080fd5b600080600060608486031215611c9457600080fd5b83359250611ca460208501611a8e565b91506040840135611cb481611c71565b809150509250925092565b803560ff81168114611aa557600080fd5b60008060008060008060008060e0898b031215611cec57600080fd5b883567ffffffffffffffff811115611d0357600080fd5b611d0f8b828c01611aaa565b9099509750611d22905060208a01611cbf565b9550611d3060408a01611cbf565b9450611d3e60608a01611a8e565b9350611d4c60808a01611cbf565b9250611d5a60a08a01611a8e565b915060c089013590509295985092959890939650565b600060208284031215611d8257600080fd5b611d8b82611a8e565b9392505050565b60008060008060808587031215611da857600080fd5b8435935060208501359250611dbf60408601611a8e565b9150611dcd60608601611a8e565b905092959194509250565b6000815180845260005b81811015611dfe57602081850181015186830182015201611de2565b506000602082860101526020601f19601f83011685010191505092915050565b602081528151602082015260006020830151604080840152611e436060840182611dd8565b949350505050565b600080600060408486031215611e6057600080fd5b83359250602084013567ffffffffffffffff811115611b2d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611ea857607f821691505b602082108103611ec857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611f1857600081815260208120601f850160051c81016020861015611ef55750805b601f850160051c820191505b81811015611f1457828155600101611f01565b5050505b505050565b67ffffffffffffffff831115611f3557611f35611e7e565b611f4983611f438354611e94565b83611ece565b6000601f841160018114611f7d5760008515611f655750838201355b600019600387901b1c1916600186901b178355611fd7565b600083815260209020601f19861690835b82811015611fae5786850135825560209485019460019092019101611f8e565b5086821015611fcb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561200657600080fd5b8135611d8b81611c71565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff810361203d5761203d612011565b60010192915050565b600061ffff80831681810361205d5761205d612011565b6001019392505050565b8082028115828204841417610f2557610f25612011565b60008261209b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156120b257600080fd5b5051919050565b6000602082840312156120cb57600080fd5b8151611d8b81611c71565b80820180821115610f2557610f25612011565b60e081528760e08201526000610100898b8285013760008a840182015260ff98891660208401529688166040830152509390951660608401526001600160a01b03918216608084015260a083015290921660c0830152601f909201601f19160101919050565b81810381811115610f2557610f25612011565b815167ffffffffffffffff81111561217c5761217c611e7e565b6121908161218a8454611e94565b84611ece565b602080601f8311600181146121c557600084156121ad5750858301515b600019600386901b1c1916600185901b178555611f14565b600085815260208120601f198616915b828110156121f4578886015182559484019460019091019084016121d5565b50858210156122125787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b805169ffffffffffffffffffff81168114611aa557600080fd5b600080600080600060a0868803121561225457600080fd5b61225d86612222565b945060208601519350604086015192506060860151915061228060808701612222565b90509295509295909350565b602081526000611d8b6020830184611dd856fea2646970667358221220f989a0637b14558269eeb3d075afb2d60872292b8b9f5c0432bc0043ed8f4cd564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 169,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 487,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "_challengeIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)337_storage"
      },
      {
        "astId": 490,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "dataFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 512,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "isUserRegisteredTable",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 516,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "userHasLiveChallenge",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 521,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "userTable",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserDetails)495_storage)"
      },
      {
        "astId": 526,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "challengeTable",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(ChallengeDetails)508_storage)"
      },
      {
        "astId": 530,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "usersCurrentChallenge",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 534,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "ForfeitedFundsToBeCollected",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 538,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "priceFeedAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 544,
        "contract": "contracts/ChainHabits.sol:ChainHabits",
        "label": "currentStakedByUser",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserDetails)495_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainHabits.UserDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(UserDetails)495_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ChallengeDetails)508_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChainHabits.ChallengeDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ChallengeDetails)508_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChallengeDetails)508_storage": {
        "encoding": "inplace",
        "label": "struct ChainHabits.ChallengeDetails",
        "members": [
          {
            "astId": 497,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "targetMiles",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 499,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "NoOfWeeks",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 501,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "failedWeeks",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 503,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "isLive",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 505,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "challengeStartDate",
            "offset": 4,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 507,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "defaultAddress",
            "offset": 10,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)337_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 336,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserDetails)495_storage": {
        "encoding": "inplace",
        "label": "struct ChainHabits.UserDetails",
        "members": [
          {
            "astId": 492,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "userID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 494,
            "contract": "contracts/ChainHabits.sol:ChainHabits",
            "label": "refreshToken",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}